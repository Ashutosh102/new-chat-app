{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:\\\\Backend Webs\\\\project_chat_application-master\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nconst strictUriEncode = require('strict-uri-encode');\n\nconst decodeComponent = require('decode-uri-component');\n\nconst splitOnFirst = require('split-on-first');\n\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return key => (result, value) => {\n        const index = result.length;\n\n        if (value === undefined) {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[', index, ']'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n      };\n\n    case 'bracket':\n      return key => (result, value) => {\n        if (value === undefined) {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[]'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n      };\n\n    case 'comma':\n      return key => (result, value, index) => {\n        if (value === null || value === undefined || value.length === 0) {\n          return result;\n        }\n\n        if (index === 0) {\n          return [[encode(key, options), '=', encode(value, options)].join('')];\n        }\n\n        return [[result, encode(value, options)].join(',')];\n      };\n\n    default:\n      return key => (result, value) => {\n        if (value === undefined) {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, encode(key, options)];\n        }\n\n        return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n      };\n  }\n}\n\nfunction parserForArrayFormat(options) {\n  let result;\n\n  switch (options.arrayFormat) {\n    case 'index':\n      return (key, value, accumulator) => {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n\n        accumulator[key][result[1]] = value;\n      };\n\n    case 'bracket':\n      return (key, value, accumulator) => {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    case 'comma':\n      return (key, value, accumulator) => {\n        const isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;\n        const newValue = isArray ? value.split(',') : value;\n        accumulator[key] = newValue;\n      };\n\n    default:\n      return (key, value, accumulator) => {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\n\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n\n  return value;\n}\n\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n\n  return value;\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n\n  return input;\n}\n\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n\n  return input;\n}\n\nfunction extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return input.slice(queryStart + 1);\n}\n\nfunction parse(input, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    parseNumbers: false,\n    parseBooleans: false\n  }, options);\n  const formatter = parserForArrayFormat(options); // Create an object with no prototype\n\n  const ret = Object.create(null);\n\n  if (typeof input !== 'string') {\n    return ret;\n  }\n\n  input = input.trim().replace(/^[?#&]/, '');\n\n  if (!input) {\n    return ret;\n  }\n\n  for (const param of input.split('&')) {\n    let _splitOnFirst = splitOnFirst(param.replace(/\\+/g, ' '), '='),\n        _splitOnFirst2 = _slicedToArray(_splitOnFirst, 2),\n        key = _splitOnFirst2[0],\n        value = _splitOnFirst2[1]; // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n\n    value = value === undefined ? null : decode(value, options);\n\n    if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n      value = Number(value);\n    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n      value = value.toLowerCase() === 'true';\n    }\n\n    formatter(decode(key, options), value, ret);\n  }\n\n  if (options.sort === false) {\n    return ret;\n  }\n\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n    const value = ret[key];\n\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n  if (!object) {\n    return '';\n  }\n\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none'\n  }, options);\n  const formatter = encoderForArrayFormat(options);\n  const keys = Object.keys(object);\n\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n\n  return keys.map(key => {\n    const value = object[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key, options);\n    }\n\n    if (Array.isArray(value)) {\n      return value.reduce(formatter(key), []).join('&');\n    }\n\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (input, options) => {\n  return {\n    url: removeHash(input).split('?')[0] || '',\n    query: parse(extract(input), options)\n  };\n};","map":null,"metadata":{},"sourceType":"script"}